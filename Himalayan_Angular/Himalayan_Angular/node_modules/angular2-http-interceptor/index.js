import { Observable } from 'rxjs';
import { NgModule } from '@angular/core';
import { BaseRequestOptions, BaseResponseOptions, BrowserXhr, CookieXSRFStrategy, Http, RequestOptions, ResponseOptions, XHRBackend, XSRFStrategy } from '@angular/http';

/**
 * Created by yulonh on 2016/11/22.
 */
var HttpInterceptor = (function () {
    function HttpInterceptor() {
    }
    /**
     * @param {?} request
     * @return {?}
     */
    HttpInterceptor.prototype.before = function (request) {
        return request;
    };
    /**
     * @param {?} res
     * @return {?}
     */
    HttpInterceptor.prototype.after = function (res) {
        return res;
    };
    return HttpInterceptor;
}());

var HttpInterceptorConnection = (function () {
    /**
     * @param {?} requestObservable
     * @param {?} xhrBackend
     */
    function HttpInterceptorConnection(requestObservable, xhrBackend) {
        var _this = this;
        this.response = new Observable(function (responseObserver) {
            _this.subscription = requestObservable.subscribe(function (req) {
                _this.request = req;
                var xhrConnection = xhrBackend.createConnection(req);
                xhrConnection.response.subscribe(function (response) { return responseObserver.next(response); }, function (error) { return responseObserver.error(error); }, function () { return responseObserver.complete(); });
            }, function (error) { return console.error(error); });
        });
    }
    return HttpInterceptorConnection;
}());

/**
 * Created by yulonh on 2016/11/22.
 */
var HttpInterceptorBackend = (function () {
    /**
     * @param {?} httpInterceptors
     * @param {?} xhrBackend
     */
    function HttpInterceptorBackend(httpInterceptors, xhrBackend) {
        this.httpInterceptors = httpInterceptors;
        this.xhrBackend = xhrBackend;
    }
    /**
     * @param {?} request
     * @return {?}
     */
    HttpInterceptorBackend.prototype.createConnection = function (request) {
        var /** @type {?} */ reqObs = Observable.of(request);
        var _loop_1 = function (interceptor) {
            if (!interceptor.before) {
                return "continue";
            }
            reqObs = reqObs.mergeMap(function (req) {
                var /** @type {?} */ nextReq = interceptor.before(req);
                return nextReq instanceof Observable ? nextReq : Observable.of(nextReq);
            });
        };
        for (var _i = 0, _a = this.httpInterceptors; _i < _a.length; _i++) {
            var interceptor = _a[_i];
            _loop_1(/** @type {?} */ interceptor);
        }
        var /** @type {?} */ connection = new HttpInterceptorConnection(reqObs, this.xhrBackend);
        this.httpInterceptors.forEach(function (interceptor) {
            if (interceptor.after) {
                connection.response = interceptor.after(connection.response);
            }
        });
        return connection;
    };
    return HttpInterceptorBackend;
}());

/**
 * Created by yulonh on 2016/11/22.
 */
/**
 * @param {?} httpInterceptorBackend
 * @param {?} requestOptions
 * @return {?}
 */
function httpFactory(httpInterceptorBackend, requestOptions) {
    return new Http(httpInterceptorBackend, requestOptions);
}
/**
 * @return {?}
 */
function createDefaultCookieXSRFStrategy() {
    return new CookieXSRFStrategy();
}
/**
 * The module that includes http interceptor providers
 */
var HttpInterceptorModule = (function () {
    function HttpInterceptorModule() {
    }
    /**
     * @param {?} interceptors
     * @return {?}
     */
    HttpInterceptorModule.withInterceptors = function (interceptors) {
        return {
            ngModule: HttpInterceptorModule,
            providers: interceptors.concat([
                {
                    deps: [HttpInterceptor, XHRBackend],
                    provide: HttpInterceptorBackend,
                    useClass: HttpInterceptorBackend,
                },
                {
                    deps: [HttpInterceptorBackend, RequestOptions],
                    provide: Http,
                    useFactory: httpFactory,
                },
                BrowserXhr,
                {
                    provide: RequestOptions,
                    useClass: BaseRequestOptions
                },
                {
                    provide: ResponseOptions,
                    useClass: BaseResponseOptions
                },
                XHRBackend,
                {
                    provide: XSRFStrategy,
                    useFactory: createDefaultCookieXSRFStrategy
                },
            ])
        };
    };
    return HttpInterceptorModule;
}());
HttpInterceptorModule.decorators = [
    { type: NgModule },
];
/**
 * @nocollapse
 */
HttpInterceptorModule.ctorParameters = function () { return []; };

export { HttpInterceptor, HttpInterceptorBackend, HttpInterceptorConnection, httpFactory, createDefaultCookieXSRFStrategy, HttpInterceptorModule };
